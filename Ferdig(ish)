import numpy as np
import matplotlib.pyplot as plt
import math

a = 0
b = 10
N= 30
x_uniform = np.linspace(a, b, N)
x_cheby = (b+a)/2. + (a-b)/2. * np.cos(np.arange(N)*np.pi/(N-1))

my = 2.0
sigma


def doublederive(x,my,sigma):
    return np.exp(-((x - my) ** 2) / sigma ** 2)

def spectral_laplace_A(x):
    N = len(x)
    #a, b = x[0], x[N - 1]
    A = np.zeros((N, N))
    # FIXIT: bestem A_ij
    A[0][0] = 1
    A[N - 1][N - 1] = 1
    for j in range(1, N-1):
        for i in range(N):
            A[j][i] = -find_second_derivative_of_lx(x, j, i)
    return A


def find_second_derivative_of_lx(x, j, i):
    N = len(x)
    lx = 0.0
    c1 = 1.0
    secondderivative_lx=0
    for k in range(N):
        for m in range(N):
            if (k != m and k!=i and m!=i):
                secondderivative_lx = 1.0
                for n in range(N):
                    if (n != i and n != k and n != m):
                        secondderivative_lx *= (x[j] - x[n])
            lx += secondderivative_lx
            secondderivative_lx=0
    for p in range(N):
        if (p != i):
            c1 *= 1.0 / (x[i] - x[p])
    return lx*c1


def spectral_laplace_B(x,ua,ub, my, sigma):
    N = len(x)
    B = np.zeros(N)
    B[0] = ua
    B[N-1] = ub
    for i in range(1,N-1):
        B[i] = -doublederive(x[i], my, sigma)
    return B
    # set up the spectral method for Laplace eqn and solve the resulting system

def spectral_laplace(x, my, sigma):
    ua = -1
    ub = 1
    A = spectral_laplace_A(x)
    B = spectral_laplace_B(x,ua,ub, my , sigma)

    # solve the system
    return np.linalg.solve(A,B)

spectral_laplace(x_uniform, my, sigma)

spectral_laplace(x_cheby, my, sigma)
